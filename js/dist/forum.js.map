{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,qDCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,oC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,2B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,oB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCIxD,SACE,IAAIC,IAAAA,OAAaC,KACdC,UAAmB,aACnBA,UAAU,YAAaC,IAAAA,eACvBD,UAAmB,UCDxBE,IAAAA,aAAiBC,IAAI,iBAAiB,YCDpCC,EAAAA,EAAAA,QAAOC,IAAAA,UAA+B,iBAAiB,SAAqCC,GACjE,UAArBC,KAAKD,OAAOE,OACVF,EAAOG,OAAOC,EAChBJ,EAAOG,OAAOC,GAAKJ,EAAOG,OAAOC,GAAK,IAAM,eAE5CJ,EAAOG,OAAOE,WAAY,EAGhC,KAEAP,EAAAA,EAAAA,QAAOC,IAAAA,UAA+B,WAAW,SAAUO,GACzDA,EAAIC,MAAQ,YACd,KCRAT,EAAAA,EAAAA,QAAOU,IAAoB,sBAAsB,SAAUC,EAAmCC,GAC5F,GAAKA,EAAWH,QAAhB,CAEA,IAAII,EAAUD,EAAWL,YAEzBI,EAAMZ,IACJ,YACAe,EAACC,IAAM,CACLC,KAAK,cACLC,QAAS,WACPJ,GAAWA,EACXD,EAAWM,KAAK,CAAEX,UAAWM,GAC/B,GAECf,IAAAA,WAAeqB,MACdP,EAAWL,YAAc,kDAAoD,kDAdpD,CAkBjC,KCpBAP,EAAAA,EAAAA,QAAOL,IAAAA,UAAsB,UAAU,SAAUyB,GAC1CjB,KAAKI,aAEVa,EAAOrB,IAAI,YAAae,EAACO,IAAK,CAACC,KAAK,YAAYC,MAAOzB,IAAAA,WAAeqB,MAAM,sCAAuCH,KAAK,gBAAkB,GAC5I,GHFF,G","sources":["webpack://@fof/frontpage/webpack/bootstrap","webpack://@fof/frontpage/webpack/runtime/compat get default export","webpack://@fof/frontpage/webpack/runtime/define property getters","webpack://@fof/frontpage/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/frontpage/webpack/runtime/make namespace object","webpack://@fof/frontpage/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/extenders']\"","webpack://@fof/frontpage/external root \"flarum.core.compat['common/Model']\"","webpack://@fof/frontpage/./src/forum/extend.ts","webpack://@fof/frontpage/./src/forum/index.ts","webpack://@fof/frontpage/./src/forum/extenders/addFrontSort.ts","webpack://@fof/frontpage/./src/forum/extenders/addFrontPage.tsx","webpack://@fof/frontpage/./src/forum/extenders/addStickyBadge.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extenders'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","import Extend from 'flarum/common/extenders';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Model from 'flarum/common/Model';\n\nexport default [\n  new Extend.Model(Discussion) //\n    .attribute<boolean>('frontpage')\n    .attribute('frontdate', Model.transformDate)\n    .attribute<boolean>('front'),\n];\n","import app from 'flarum/forum/app';\nimport addFrontSort from './extenders/addFrontSort';\nimport addFrontPage from './extenders/addFrontPage';\nimport addStickyBadge from './extenders/addStickyBadge';\n\nexport { default as extend } from './extend';\n\napp.initializers.add('fof/frontpage', () => {\n  addFrontSort();\n  addFrontPage();\n  addStickyBadge();\n});\n","import { extend } from 'flarum/common/extend';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\n\nimport type { PaginatedListParams } from 'flarum/common/states/PaginatedListState';\n\nexport default function () {\n  extend(DiscussionListState.prototype, 'requestParams', function (this: DiscussionListState, params: PaginatedListParams) {\n    if (this.params.sort === 'front') {\n      if (params.filter.q) {\n        params.filter.q = (params.filter.q || '') + 'is:frontpage';\n      } else {\n        params.filter.frontpage = true;\n      }\n    }\n  });\n\n  extend(DiscussionListState.prototype, 'sortMap', function (map: Record<string, string>) {\n    map.front = '-frontdate';\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\n\nimport type Discussion from 'flarum/common/models/Discussion';\nimport type Mithril from 'mithril';\nimport type ItemList from 'flarum/common/utils/ItemList';\n\nexport default function addFrontPage() {\n  extend(DiscussionControls, 'moderationControls', function (items: ItemList<Mithril.Children>, discussion: Discussion) {\n    if (!discussion.front()) return;\n\n    let isFront = discussion.frontpage();\n\n    items.add(\n      'frontpage',\n      <Button\n        icon=\"fas fa-home\"\n        onclick={() => {\n          isFront = !isFront;\n          discussion.save({ frontpage: isFront });\n        }}\n      >\n        {app.translator.trans(\n          discussion.frontpage() ? 'core.forum.post_controls.pull_from_front_button' : 'core.forum.post_controls.push_to_front_button'\n        )}\n      </Button>\n    );\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Badge from 'flarum/common/components/Badge';\n\nimport type ItemList from 'flarum/common/utils/ItemList';\nimport type Mithril from 'mithril';\n\nexport default function addStickyBadge() {\n  extend(Discussion.prototype, 'badges', function (badges: ItemList<Mithril.Children>) {\n    if (!this.frontpage()) return;\n\n    badges.add('frontpage', <Badge type=\"frontpage\" label={app.translator.trans('core.forum.badge.frontpage_tooltip')} icon=\"fas fa-home\" />, 10);\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","Extend","Discussion","attribute","Model","app","add","extend","DiscussionListState","params","this","sort","filter","q","frontpage","map","front","DiscussionControls","items","discussion","isFront","m","Button","icon","onclick","save","trans","badges","Badge","type","label"],"sourceRoot":""}